@U #f
  /f f

@Y #f
  /#x /f /x x #x /f /x x

@id
  #x x

@flip #f #a #b
  //f b a

@K #a #b
  b

@CNat.zer #s #z
  z

@CNat.suc #n #s #z
  /s //n s z

@CNat.add #a #b #s #z
  //a s //b s z

@CNat.mul #a #b #s #z
  //a /b s z

@CNat.exp #a #b
  /b a

@CNat.mod #a #b
  ///b #c #d /c #e //d #f #g /f //e f g e #c /c #d #e e #c //a ///b #d #e #f /d #g //e g f #d d #d #e /e d ///b #d #e d #d d #d d

@CNat.P #n
  //CNat.exp 2 n

@CNat.expMod #a #b #m
  //CNat.mod //CNat.exp a b m

@CNat.double
  /CNat.mul 2

@CNat.toNat
  #n //n
    #n #succ #zero /succ n
    #succ #zero zero

@Nat.suc #n
  #suc #zer /suc n

@Nat.zer
  #suc #zer zer

@Nat.id /Y #R #n
  //n
    #n /Nat.suc /R n
    Nat.zer

@Nat.isEven /Y #R #n #fal #tru
  //n
    #n ///R n tru fal
    tru

@Nat.copy #f /Y #R #n
  //n
    #n #x /f //R n x
    #m m

@Nat.add /Nat.copy Nat.suc

@Bool.false
  #false #true false

@Bool.true
  #false #true true

@Bool.id #x
  //x Bool.false Bool.true

@Bool.not #b #false #true
  //b true false

@Bool.xor #a
  //a id Bool.not

@Bool.and #a
  //a #b Bool.false #b b

@Bool.if #b #caseTrue #caseFalse
  //b caseFalse caseTrue

@CList.nil #con #nil
  nil

@CList.con #x #xs #con #nil
  //con
    x
    //xs con nil

@CList.map #f #xs #con #nil
  //xs
    #x /con /f x
    nil

@CList.zip #f #xs #ys #con #nil
  ///xs
    #x #xs #ys //ys
      #y #ys //con //f x y /xs ys
      nil
    #ys nil
    //ys
      #x #xs #con #nil //con x xs
      #con #nil nil
      
@CList.nth #x #i #xs
  ////xs
    #x #xs #i //i
      #i /xs i
      #X x
    #i #X X
    /CNat.toNat i
    x

@CList.gen #n #f #con #nil
  ///n
    #n #k //con /f k /n /CNat.suc k
    #k nil
    CNat.zer

@CList.len #xs #suc #zer
  //xs #x #xs /suc xs zer

@CList.id #xs
  //xs CList.con CList.nil

@List.con #x #xs #con #nil
  //con x xs

@List.nil #con #nil
  nil

@List.old_map #f /Y #R #xs
  //xs
    #x #xs //List.con /f x /R xs
    List.nil

@List.defold #xs
  //xs List.con List.nil

@List.head #x #xs
  //xs
    #x #xs x
    x

@List.id /Y #R #xs
  //xs
    #x #xs //List.con x /R xs
    List.nil

@List.fold /Y #R #xs
  //xs
    #x #xs //CList.con x /R xs
    CList.nil

@List.toCList
  List.fold

@List.fmap #f /Y #R #xs #con #nil
  //xs
    #x #xs //con /f x /R xs
    nil

@List.map #f /Y #R #xs
  //xs
    #x #xs //List.con /f x /R xs
    List.nil

@List.zip #f /Y #R #xs #ys #con #nil
  //xs 
    #x #xs //ys
      #y #ys //con //f x y //R xs ys
      nil
    nil

@List.suc /Y #R #xs #con #nil
  //xs
    #x ///x
      #con #xs //con Bool.true xs
      #con #xs //con Bool.false /R xs
      con
    nil

@List.gen #n #f
  ///n
    #n #k //List.con /f k /n /CNat.suc k
    #k List.nil
    CNat.zer

@Tuple.edit #n
  //n
    #X #A /X #T #V /A #t //T t V
    #A /A #t t

@Tuple.open #n #t #fn
  /t //Tuple.edit n fn

@Tuple.id #n #t
  ///Tuple.open n t id

@Tuple.new #n
  //Tuple.edit n #x x

@Tuple.rtl #n #m /m #T #t
  /T #A ///Tuple.edit n #T //T #A t A #x x

@Tuple.rtr #n #m /m #T #t
  /T ///Tuple.edit n #T #A /T #a /t A #x x

@Tuple.toCList #n #t #con #nil
  /t ///n
    #term #edit #v /term #xs /edit //con v xs
    #edit /edit nil
    #x x

@Tuple.fromCList #xs #t
  ///xs
    #x #xs #r /xs /r x
    #r r
    t 

@Tuple.fromList #xs
  /Tuple.fromCList /List.toCList xs

@Tuple.zip #n #f #a #b #t
  ///Tuple.open n a #A
  ///Tuple.open n b #B
  //Tuple.fromCList
    ///CList.zip
      f
      //Tuple.toCList n A
      //Tuple.toCList n B
    t

@Tuple.map #n #f #a #t
  ///Tuple.open n a #A
  //Tuple.fromCList
    //CList.map f
      //Tuple.toCList n A
    t

@Tuple.xor #n #t
  ///Tuple.zip n Bool.xor t

@Tuple.and #n #t
  ///Tuple.zip n Bool.and t

@Tuple.not #n #t
  ///Tuple.map n Bool.not t

@Tuple.nth #n #i #t
  ///Tuple.open n t #t
  ///CList.nth #x x i //Tuple.toCList n t

@Pair.new #a #b
  #new //new a b

@Pair.fst #p
  /p #a #b a

@Pair.snd #p
  /p #a #b b

@Triple.new #a #b #c
  #new ///new a b c

@Triple.fst #t
  /t #a #b #c a

@Triple.snd #t
  /t #a #b #c b

@Triple.trd #t
  /t #a #b #c c

@Bits.O #xs #O #I #E /O xs

@Bits.I #xs #O #I #E /I xs

@Bits.E     #O #I #E E

@Bits.id /Y #R #xs 
  ////xs
    #xs #R /Bits.O /R xs
    #xs #R /Bits.I /R xs
    #R Bits.E
    R

@Bits.suc /Y #R #xs #O #I #E
  ///xs I #xs /O /R xs E

@Bits.add /Y #R #xs #ys
  /////xs
    #xs #ys ////ys
      #ys #xs #R /Bits.O //R xs ys
      #ys #xs #R /Bits.suc /Bits.O //R xs ys
      #xs #R Bits.E
      xs
    #xs #ys ////ys
      #ys #xs #R /Bits.suc /Bits.O //R xs ys
      #ys #xs #R /Bits.suc /Bits.I //R xs ys 
      #xs #R Bits.E
      xs
    #ys #R Bits.E
    ys
    R

@Bits.mul #xxs
  / #f /Y #R #yys
    ////yys
      #ys #R    /Bits.O /R ys
      #ys #R /f /Bits.O /R ys
      #R Bits.E
      R
    /Bits.add xxs

@Bits.rnd32.a
  /Bits.I /Bits.O /Bits.I /Bits.O /Bits.I /Bits.I /Bits.I /Bits.O
  /Bits.O /Bits.O /Bits.O /Bits.O /Bits.O /Bits.O /Bits.I /Bits.O
  /Bits.I /Bits.O /Bits.O /Bits.O /Bits.I /Bits.O /Bits.I /Bits.O
  /Bits.O /Bits.O /Bits.O /Bits.O /Bits.I /Bits.I /Bits.I /Bits.I
  /Bits.I /Bits.I /Bits.O /Bits.I /Bits.O /Bits.I /Bits.I /Bits.O
  /Bits.O /Bits.I /Bits.I /Bits.I /Bits.O /Bits.I /Bits.O /Bits.I
  /Bits.O /Bits.O /Bits.O /Bits.O /Bits.I /Bits.I /Bits.I /Bits.O
  /Bits.O /Bits.I /Bits.I /Bits.I /Bits.I /Bits.O /Bits.O /Bits.O
  Bits.E

@Bits.rnd32.b
  /Bits.I /Bits.O /Bits.O /Bits.O /Bits.O /Bits.O /Bits.O /Bits.O
  /Bits.O /Bits.I /Bits.O /Bits.I /Bits.I /Bits.I /Bits.O /Bits.O
  /Bits.O /Bits.I /Bits.I /Bits.O /Bits.O /Bits.I /Bits.I /Bits.I
  /Bits.O /Bits.O /Bits.O /Bits.I /Bits.I /Bits.O /Bits.I /Bits.I
  /Bits.I /Bits.O /Bits.I /Bits.I /Bits.I /Bits.I /Bits.O /Bits.O
  /Bits.O /Bits.O /Bits.O /Bits.I /Bits.I /Bits.O /Bits.I /Bits.O
  /Bits.O /Bits.I /Bits.I /Bits.O /Bits.I /Bits.I /Bits.O /Bits.O
  /Bits.O /Bits.I /Bits.O /Bits.I /Bits.I /Bits.O /Bits.I /Bits.I
  Bits.E

@xs
  //List.con Bool.false
  //List.con Bool.false
  //List.con Bool.true
  //List.con Bool.true
  List.nil

/Bits.id ///8 2 /Bits.mul Bits.rnd32.a Bits.rnd32.b
